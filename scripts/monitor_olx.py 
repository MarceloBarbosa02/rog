#!/usr/bin/env python3
# monitor_olx.py - Monitoramento espec√≠fico para OLX

import requests
import json
import re
from datetime import datetime
import time
import os
from bs4 import BeautifulSoup

class MonitorOLXEspecializado:
    def __init__(self):
        self.modelo_principal = "ASUS ROG Zephyrus M16"
        self.codigo_modelo = "GU604"
        self.caracteristicas_unicas = [
            "anime matrix", "mini led", "240hz", "2560x1600", 
            "gu604", "2023", "tampa animada", "led matrix",
            "nebula hdr", "rog intelligent cooling"
        ]
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
    
    def gerar_termos_olx(self):
        """Termos espec√≠ficos para busca na OLX"""
        return [
            "ASUS ROG Zephyrus M16",
            "ROG M16 AniMe Matrix",
            "Zephyrus GU604",
            "ASUS ROG 16 240Hz",
            "notebook AniMe Matrix",
            "ROG Mini LED"
        ]
    
    def buscar_olx(self):
        """Busca an√∫ncios na OLX"""
        resultados_todos = []
        
        for termo in self.gerar_termos_olx():
            print(f"üîç Buscando OLX: '{termo}'")
            
            # URL da OLX para notebooks
            url = f"https://www.olx.com.br/informatica/notebooks-netbooks"
            params = {
                'q': termo,
                'sf': '1'  # Ordenar por mais recentes
            }
            
            try:
                response = requests.get(url, headers=self.headers, params=params, timeout=15)
                
                if response.status_code == 200:
                    anuncios = self.extrair_anuncios_olx(response.text, termo)
                    resultados_todos.extend(anuncios)
                else:
                    print(f"‚ùå Erro HTTP {response.status_code} para '{termo}'")
                
                time.sleep(3)  # Evitar bloqueio
                
            except Exception as e:
                print(f"‚ùå Erro na busca OLX '{termo}': {e}")
        
        return self.filtrar_candidatos_olx(resultados_todos)
    
    def extrair_anuncios_olx(self, html, termo_busca):
        """Extrai an√∫ncios do HTML da OLX"""
        anuncios = []
        
        try:
            soup = BeautifulSoup(html, 'html.parser')
            
            # Procurar por containers de an√∫ncios (estrutura pode mudar)
            containers = soup.find_all('div', {'data-ds-component': True})
            
            for container in containers:
                try:
                    # Extrair t√≠tulo
                    titulo_elem = container.find('h2') or container.find('h3')
                    titulo = titulo_elem.get_text(strip=True) if titulo_elem else ""
                    
                    # Extrair pre√ßo
                    preco_elem = container.find('span', text=re.compile(r'R\$'))
                    preco_str = preco_elem.get_text(strip=True) if preco_elem else "R$ 0"
                    
                    # Extrair link
                    link_elem = container.find('a', href=True)
                    link = link_elem['href'] if link_elem else ""
                    
                    # Verificar se tem dados v√°lidos
                    if titulo and any(word in titulo.lower() for word in ['asus', 'rog', 'notebook']):
                        preco = self.extrair_preco_numerico(preco_str)
                        
                        anuncio = {
                            'titulo': titulo,
                            'preco': preco,
                            'preco_str': preco_str,
                            'url': f"https://olx.com.br{link}" if link.startswith('/') else link,
                            'site': 'OLX',
                            'termo_busca': termo_busca,
                            'data_busca': datetime.now().isoformat()
                        }
                        anuncios.append(anuncio)
                        
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"‚ùå Erro ao processar HTML OLX: {e}")
        
        return anuncios
    
    def extrair_preco_numerico(self, preco_str):
        """Converte string de pre√ßo para n√∫mero"""
        numeros = re.findall(r'\d+', preco_str.replace('.', '').replace(',', ''))
        return int(''.join(numeros)) if numeros else 0
    
    def calcular_score_olx(self, titulo, descricao=""):
        """Calcula score espec√≠fico para OLX"""
        texto_completo = (titulo + " " + descricao).lower()
        score = 0
        caracteristicas_encontradas = []
        
        # Caracter√≠sticas super espec√≠ficas
        if "anime matrix" in texto_completo:
            score += 15
            caracteristicas_encontradas.append("üéØ AniMe Matrix")
        
        if "gu604" in texto_completo:
            score += 15
            caracteristicas_encontradas.append("üéØ GU604")
        
        if "mini led" in texto_completo:
            score += 12
            caracteristicas_encontradas.append("üéØ Mini LED")
        
        # Caracter√≠sticas importantes
        if "240hz" in texto_completo:
            score += 8
            caracteristicas_encontradas.append("‚≠ê 240Hz")
        
        if "2560x1600" in texto_completo or "2560 x 1600" in texto_completo:
            score += 8
            caracteristicas_encontradas.append("‚≠ê Resolu√ß√£o")
        
        if "2023" in texto_completo:
            score += 6
            caracteristicas_encontradas.append("‚≠ê 2023")
        
        # Modelo e marca
        if "zephyrus m16" in texto_completo:
            score += 12
            caracteristicas_encontradas.append("üéØ Zephyrus M16")
        
        if "asus" in texto_completo and "rog" in texto_completo:
            score += 8
            caracteristicas_encontradas.append("‚úì ASUS ROG")
        
        return score, caracteristicas_encontradas
    
    def analisar_suspeita_preco_olx(self, preco):
        """An√°lise espec√≠fica de pre√ßo para OLX"""
        if preco < 2000:
            return "üö® EXTREMAMENTE SUSPEITO", 12
        elif preco < 4000:
            return "‚ö†Ô∏è MUITO SUSPEITO", 10
        elif preco < 7000:
            return "‚ö†Ô∏è SUSPEITO", 7
        elif preco < 10000:
            return "üí∞ PRE√áO BAIXO", 4
        else:
            return "üí∞ PRE√áO NORMAL", 0
    
    def filtrar_candidatos_olx(self, anuncios):
        """Filtra e pontua candidatos da OLX"""
        candidatos = []
        
        for anuncio in anuncios:
            score, caracteristicas = self.calcular_score_olx(anuncio['titulo'])
            preco = anuncio['preco']
            suspeita_preco, score_preco = self.analisar_suspeita_preco_olx(preco)
            
            score_total = score + score_preco
            
            # Filtro: s√≥ candidatos com score significativo
            if score >= 12 or score_preco >= 7:
                anuncio.update({
                    'score_similaridade': score,
                    'score_preco': score_preco,
                    'score_total': score_total,
                    'caracteristicas_encontradas': caracteristicas,
                    'suspeita_preco': suspeita_preco,
                    'nivel_alerta': self.definir_nivel_alerta_olx(score_total),
                    'probabilidade_match': self.calcular_probabilidade(score_total)
                })
                candidatos.append(anuncio)
        
        return sorted(candidatos, key=lambda x: x['score_total'], reverse=True)
    
    def definir_nivel_alerta_olx(self, score_total):
        """Define n√≠vel de alerta para OLX"""
        if score_total >= 45:
            return "üö® ALERTA M√ÅXIMO"
        elif score_total >= 35:
            return "‚ö†Ô∏è ALERTA ALTO"
        elif score_total >= 25:
            return "‚ö†Ô∏è ALERTA M√âDIO"
        else:
            return "‚ÑπÔ∏è MONITORAR"
    
    def calcular_probabilidade(self, score_total):
        """Calcula probabilidade de match"""
        if score_total >= 45:
            return "95%+"
        elif score_total >= 35:
            return "80-95%"
        elif score_total >= 25:
            return "60-80%"
        else:
            return "30-60%"
    
    def salvar_resultados_olx(self, candidatos):
        """Salva resultados espec√≠ficos da OLX"""
        if not candidatos:
            return None
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        base_dir = os.path.expanduser("~/monitor_asus_rog")
        filename = f"{base_dir}/resultados/olx_candidatos_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(candidatos, f, indent=2, ensure_ascii=False)
        
        return filename

# Execu√ß√£o principal
if __name__ == "__main__":
    print("üîç === MONITOR OLX ESPECIALIZADO ===")
    print(f"‚è∞ Iniciando busca OLX - {datetime.now()}")
    
    monitor = MonitorOLXEspecializado()
    candidatos = monitor.buscar_olx()
    
    if candidatos:
        print(f"\nüéØ ENCONTRADOS {len(candidatos)} CANDIDATOS NA OLX:")
        print("=" * 60)
        
        for i, candidato in enumerate(candidatos, 1):
            print(f"\n{i}. {candidato['nivel_alerta']} (Probabilidade: {candidato['probabilidade_match']})")
            print(f"   üìù T√≠tulo: {candidato['titulo']}")
            print(f"   üí∞ Pre√ßo: R$ {candidato['preco']:,} ({candidato['suspeita_preco']})")
            print(f"   üìä Score: {candidato['score_total']} (Sim: {candidato['score_similaridade']}, Pre√ßo: {candidato['score_preco']})")
            print(f"   ‚úÖ Caracter√≠sticas: {', '.join(candidato['caracteristicas_encontradas'])}")
            print(f"   üåê URL: {candidato['url']}")
        
        # Salvar resultados
        arquivo = monitor.salvar_resultados_olx(candidatos)
        if arquivo:
            print(f"\nüíæ Resultados OLX salvos em: {arquivo}")
        
        # Alertas cr√≠ticos
        alertas_criticos = [c for c in candidatos if c['score_total'] >= 40]
        if alertas_criticos:
            print(f"\nüö® {len(alertas_criticos)} ALERTAS CR√çTICOS NA OLX!")
            print("‚ö†Ô∏è INVESTIGAR IMEDIATAMENTE!")
            
    else:
        print("\n‚úÖ Nenhum candidato encontrado na OLX nesta varredura.")
        